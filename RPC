ref: http://www.cnblogs.com/LBSer/p/4853234.html
*** RPC几乎是每一个从学校进入互联网公司的同学都要首先学习的框架，之前面试过一个在大型互联网公司工作过两年的同学，
对RPC还是停留在使用层面，这是不应该的，希望大家不仅要会用而且要知道内部的原理。***

一旦踏入公司尤其是大型互联网公司就会发现，公司的系统都由成千上万大大小小的服务组成，各服务部署在不同的机器上，由不同的
团队负责。这时就会遇到两个问题：
  1）要搭建一个新服务，免不了需要依赖他人的服务，而现在他人的服务都在远端，怎么调用？
  2）其它团队要使用我们的新服务，我们的服务该怎么发布以便他人调用?
  
大家都写过不少程序，比如写个hello world服务类，然后本地调用下，如下所示。
public interface HelloWorldService {
    String sayHello(String msg);
}

public class HelloWorldServiceImpl implements HelloWorldService {
    @Override
    public String sayHello(String msg) {
        String result = "hello world " + msg;
        System.out.println(result);
        return result;
    }
}

public class Test {
    public static void main(String[] args) {
       HelloWorldService helloWorldService = new HelloWorldServiceImpl();
       helloWorldService.sayHello("test");
    } 
}

这些程序的特点是服务消费方和服务提供方是本地调用关系。

1 如何调用他人的远程服务？
  由于各服务部署在不同机器，服务间的调用免不了网络通信过程，服务消费方每调用一个服务都要写一坨网络通信相关的代码，不仅复杂
  而且极易出错。如果有一种方式能让我们像调用本地服务一样调用远程服务，而让调用者对网络通信这些细节透明，那么将大大提高
  生产力，比如服务消费方在执行helloWorldService.sayHello("test")时，实质上调用的是远端的服务。这种方式其实就是
  RPC（Remote Procedure Call），在各大互联网公司中被广泛使用，如阿里巴巴的hsf、dubbo（开源）、
  Facebook的thrift（开源）、Google grpc（开源）、Twitter的finagle（开源）等
  
  要让网络通信细节对使用者透明，我们需要对通信细节进行封装，我们先看下一个RPC调用的流程涉及到哪些通信细节：
                       rpc            bundle args         send
   Client  ----------------------------> Client ----------------------> Network 
  (caller) <---------------------------  Stub  <----------------------- Service
                 return           unbundle result vals      receive       |^
                                                                          ||
                                                                          ||
            local return          bundle result vals        send          V|
   Server ----------------------------> Server -----------------------> Network
   (callee)<--------------------------- Stub <------------------------- Service
              local call            unbundle args          receive
              
              
1）服务消费方（client）调用以本地调用方式调用服务；
2）client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；
3）client stub找到服务地址，并将消息发送到服务端；
4）server stub收到消息后进行解码；
5）server stub根据解码结果调用本地的服务；
6）本地服务执行并将结果返回给server stub；
7）server stub将返回结果打包成消息并发送至消费方；
8）client stub接收到消息，并进行解码；
9）服务消费方得到最终结果。

RPC的目标就是要2~8这些步骤都封装起来，让用户对这些细节透明。

怎么封装通信细节才能让用户像以本地调用方式调用远程服务呢？对java来说就是使用代理！java代理有两种方式：
1） jdk 动态代理；
2）字节码生成。
尽管字节码生成方式实现的代理更为强大和高效，但代码维护不易，大部分公司实现RPC框架时还是选择动态代理方式。

简单介绍下动态代理怎么实现我们的需求 （**********代码见原文**********)
之后的步骤
 a. 对消息进行编码和解码
       确定消息数据结构(接口名称，方法名，参数类型/值，超时时间，requestID，返回值，...）
       序列化
       通信(java nio， mina, netty, ...)
 b. 如何发布自己的服务
      同学说很简单嘛，告诉使用者服务的IP以及端口就可以了啊。确实是这样，这里问题的关键在于是自动告知还是人肉告知。
      人肉告知的方式：如果你发现你的服务一台机器不够，要再添加一台，这个时候就要告诉调用者我现在有两个ip了，
                      你们要轮询调用来实现负载均衡；调用者咬咬牙改了，结果某天一台机器挂了，调用者发现服务有一半不可用，
                      他又只能手动修改代码来删除挂掉那台机器的ip。现实生产环境当然不会使用人肉方式。

　　  有没有一种方法能实现自动告知，即机器的增添、剔除对调用方透明，调用者不再需要写死服务提供方地址？
　　    当然可以，现如今zookeeper被广泛用于实现服务自动注册与发现功能。关于zookeeper的详情和细节见原文和zookeeper文档
　　    

