::在Object-oriented中，绝大多数情况建议用多态/State代替switch-case
  当switch-case只是用于判断ID，跟多态无关，但是case又过多时，应使用查找算法，因为switch-case是线性的
  http://m.blog.csdn.net/article/details?id=8860587

::Extract Method， 当一个method中的一段代码可以组织成一个独立函数的时候，就应当提取出来成独立方法

::inline method
  情况1： 有时候你会遇到某些函数,其内部代码和函数名称同样清晰易读。也可能你重构了该函数, 使得其内容和其名称变得同样清晰。
          果真如此,你就应该去掉这个函数,直接使用其中的代码。间接性可能带来帮助,但非必要的间接性总是让人不舒服
  情况2： 你手上有一群组织不甚合理的函数。你可以将它们都 inline 到一个大型函数中 ,再从中提炼出组织合理的小型函数
  
::inline Temp
  你有个临时变量,只被一个简单表达式赋值一次,而它妨碍了其它重构手法。将所有对该变量的引用动作,替换为对它赋值的那个表达式自身
  例如
    double basePrice = anOrder.basePrice();
    return (basePrice > 1000)
  应该改为
    return (anOrder.basePrice() > 1000)
    
::introduce explaining variable
  假如你有一个复杂的表达式， 将该复杂表达式(或其中一部分)的结果放进一个临时变量,以此变量名称来解释表达式用途。
  这样可以使代码可读性增强
  
::Remove Assignments to Parameters  
  如果代码里有对一个参数进行赋值的动作，要立即去掉
  
::Replace Method with Method Object
  你有一个大型函数,其中对局部变量的使用,使你无法实行 Extract Method。将这个函数放进一个单独对象中,如此一来局部变量就
  成了对象内的值域(field)。然后你可以在同一个对象中将这个大型函数分解为数个小型函数
