1. 单一职责原则
      定义：    不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。
      
2. 里氏替换原则
      定义：    所有引用基类的地方必须能透明地使用其子类的对象。
      问题由来：有一功能P1，由类A完成。现需要将功能P1进行扩展，扩展后的功能为P，其中P由原有功能P1与新功能P2组成。
                新功能P由类A的子类B来完成，则子类B在完成新功能P2的同时，有可能会导致原有功能P1发生故障。
      解决方案：当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，
                也尽量不要重载父类A的方法。
                
3. 依赖倒置原则
      定义：    高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象
      问题由来：类A直接依赖类B，假如要将类A改为依赖类C，则必须通过修改类A的代码来达成。这种场景下，类A一般是高层模块，
                负责复杂的业务逻辑；类B和类C是低层模块，负责基本的原子操作；假如修改类A，会给程序带来不必要的风险。
      解决方案：将类A修改为依赖接口I，类B和类C各自实现接口I，类A通过接口I间接与类B或者类C发生联系，则会大大降低修改类A的几率
      依赖倒置原则的核心思想是面向接口编程
      
4. 接口隔离原则
      定义：    客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。
      问题由来：类A通过接口I依赖类B，类C通过接口I依赖类D，如果接口I对于类A和类B来说不是最小接口，则类B和类D必须去实现他们
                不需要的方法。
      解决方案：将臃肿的接口I拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。
                
5. 迪米特原则
      定义：    一个对象应该对其他对象保持最少的了解。
      问题由来：类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。
      解决方案：尽量降低类与类之间的耦合。
      
6. 开闭原则
      定义：    一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。
      问题由来：在软件的生命周期内，因为变化、升级和维护等原因需要对软件原有代码进行修改时，可能会给旧代码中引入错误，
                也可能会使我们不得不对整个功能进行重构，并且需要原有代码经过重新测试。
      解决方案：当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。
