:: lambda演算
  　是一套用于研究函数定义、函数应用和递归的形式系统(formal system, https://zh.wikipedia.org/wiki/%E5%BD%A2%E5%BC%8F%E7%B3%BB%E7%B5%B1)
    它由阿隆佐·邱奇和他的学生斯蒂芬·科尔·克莱尼在20世纪30年代引入.邱奇运用λ演算在1936年给出判定性问题（Entscheidungsproblem）的一个否定的答案。
    这种演算可以用来清晰地定义什么是一个可计算函数。
    最开始，邱奇试图创制一套完整的形式系统作为数学的基础，当他发现这个系统易受罗素悖论的影响时，就把lambda演算单独分离出来，用于研究可计算性，最终
    导致了他对判定性问题的否定回答。
    
    
:: Currying
   在计算机科学中，柯里化（英语：Currying），是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数
   而且返回结果的新函数的技术。这个技术由克里斯托弗·斯特雷奇以逻辑学家哈斯凯尔·加里命名的，尽管它是Moses Schönfinkel和戈特洛布·弗雷格发明的。
   在理论计算机科学中，柯里化提供了在简单的理论模型中，比如：只接受一个单一参数的lambda演算中，研究带有多个参数的函数的方式。
   函数柯里化的对偶是Uncurrying，一种使用匿名单参数函数来实现多参数函数的方法。例如：
    var foo = function(a){
      return function(b){
        return a * a + b * b;
      }
    }
