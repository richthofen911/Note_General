主要作用
1. 用来做方法的增强，可以在不修改源码的情况下增强一些方法，在方法执行前后做任何你想做的事情（甚至根本不去执行这个方法），
   因为在InvocationHandler的invoke方法中，可以直接获取正在调用方法对应的Method对象
   典型应用包括： 添加调用日志，做事务控制等。

2. 用作远程调用(RPC)，比如现在有Java接口，这个接口的实现部署在其它服务器上，在编写客户端代码的时候，没办法直接调用接口方法，
   因为接口是不能直接生成对象的，这个时候就可以考虑代理模式（动态代理）了，通过Proxy.newProxyInstance代理一个该接口对应的
   InvocationHandler对象，然后在InvocationHandler的invoke方法内封装通讯细节就可以了。
   具体的应用包括最经典的当然是Java标准库的RMI，其它比如hessian，各种webservice框架中的远程调用

