ref http://blog.csdn.net/morewindows/article/details/7354571

位运算的操作单位是bit，运算效率能大幅提高。　***对于二分法相关的运算，通过左移右移实现的二分运算尤其能提高速度***

共六种操作

 &  与　　两个位都为1时，结果为1  
 |  或　　两个位都为0时，结果为０
 ^  抑或　两个位相同时为0，　相异时为1 （XOR)
 ~  取反　0变１，　１变０             (NOT)
 << 左移　各二进位左移若干位，高位丢弃，低位补０
 >> 右移　更二进位右移若干位，对无符号数，高位补０，有符号数，各编译器处理方式不一样，有的补符号位(算术右移)，有的补０(逻辑右移)

tips:
  只有~取反是单目操作，其他都是双目操作
  位操作只能用于整形数据，float和double会被报错
  位操作的运算优先级较低，尽量使用括号来确保运算顺序
  位操作有复合操作，比如　&=, |=, ^=, <<=, >>=
 
 常用的位操作
 １．　判断奇偶
    只要根据最末位是0还是１来决定，因此可以用 if((a & 1) == 0)
 
  2.  两数交换，　用位操作来实现交换两数而不用第三方变量
  　 a ^= b; // 　复合操作，即　a = (a^b) 
     b ^= a;  // (b^a) 即　b=b^(a^b)，　^操作满足交换律，即等价于 b=b^b^a，一个数和自己异或，结果为０(要把这个数变成二进制
              //再按位与0抑或就明白了)，任何数与0异或，结果不变，所以b被赋了a
     a ^= b;  // a=a^b，由前两步可知 a=(a^b), b=a,　所以a=a^b即a=(a^b)^a，故a被赋上b
     
  3. 变换正负
      取反后加１
     
  4. 求绝对值
    
 重要用途：　
 1. 两倍/二分运算
   a << n 等价于　a*(2^n) 这里^表示算术阶乘，不是位运算
   a >> n 等价于　a/(2^n)　同上
 2.位操作与空间压缩
    (筛选素数法)，　
